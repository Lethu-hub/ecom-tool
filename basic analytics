import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

def main():
    # Load the dataset
    data = pd.read_csv('train&testdata.csv')

    # Convert 'Date' to datetime if not already converted
    data['Date'] = pd.to_datetime(data['Date'], errors='coerce')

    print("1. Total sales amount by Month:")
    sales_by_month = data.groupby(data['Month'])['Amount'].sum().sort_index()
    print(sales_by_month, "\n")
    plt.figure(figsize=(8,4))
    sns.barplot(x=sales_by_month.index, y=sales_by_month.values, palette='Blues_d')
    plt.title('Total Sales Amount by Month')
    plt.xlabel('Month')
    plt.ylabel('Total Sales Amount')
    plt.tight_layout()
    plt.show()

    print("2. Total quantity sold by Category:")
    qty_by_cat = data.groupby('Category')['Qty'].sum().sort_values(ascending=False)
    print(qty_by_cat, "\n")
    plt.figure(figsize=(10,5))
    sns.barplot(x=qty_by_cat.index, y=qty_by_cat.values, palette='Greens_d')
    plt.title('Total Quantity Sold by Category')
    plt.xlabel('Category')
    plt.ylabel('Total Quantity')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

    print("3. Order Status Counts and Percentages:")
    status_counts = data['Status'].value_counts()
    status_percent = data['Status'].value_counts(normalize=True) * 100
    print(pd.concat([status_counts, status_percent], axis=1, keys=['Count', 'Percent']), "\n")

    print("4. Top 10 SKUs by Total Sales Amount:")
    sku_sales = data.groupby('SKU')['Amount'].sum().sort_values(ascending=False).head(10)
    print(sku_sales, "\n")
    plt.figure(figsize=(10,5))
    sns.barplot(x=sku_sales.index, y=sku_sales.values, palette='Oranges_d')
    plt.title('Top 10 SKUs by Sales Amount')
    plt.xlabel('SKU')
    plt.ylabel('Sales Amount')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

    print("5. Sales performance by Sales Channel:")
    channel_sales = data.groupby('Sales Channel ')['Amount'].sum().sort_values(ascending=False)
    print(channel_sales, "\n")
    plt.figure(figsize=(8,4))
    sns.barplot(x=channel_sales.index, y=channel_sales.values, palette='Purples_d')
    plt.title('Sales by Sales Channel')
    plt.xlabel('Sales Channel')
    plt.ylabel('Total Sales Amount')
    plt.xticks(rotation=30)
    plt.tight_layout()
    plt.show()

    print("6. Cancellation Rate by Fulfilment Type:")
    fulfilment_status = data.groupby(['Fulfilment', 'Status']).size().unstack(fill_value=0)
    fulfilment_status['Cancellation Rate (%)'] = (fulfilment_status.get('Cancelled', 0) / fulfilment_status.sum(axis=1)) * 100
    print(fulfilment_status[['Cancelled', 'Cancellation Rate (%)']], "\n")

    print("7. Courier Status Distribution:")
    courier_status_counts = data['Courier Status'].value_counts()
    print(courier_status_counts, "\n")
    plt.figure(figsize=(6,4))
    courier_status_counts.plot(kind='pie', autopct='%1.1f%%', startangle=140, colors=sns.color_palette('pastel'))
    plt.title('Courier Status Distribution')
    plt.ylabel('')
    plt.tight_layout()
    plt.show()

    print("8. Average Sales Amount and Quantity by Size:")
    size_stats = data.groupby('Size').agg({'Amount':'mean','Qty':'mean'}).rename(columns={'Amount':'Avg Amount','Qty':'Avg Qty'}).sort_index()
    print(size_stats, "\n")
    size_stats.plot.bar(subplots=True, layout=(2,1), figsize=(8,6), legend=False)
    plt.tight_layout()
    plt.show()

    print("9. Geographic Sales Distribution by State:")
    sales_by_state = data.groupby('ship-state')['Amount'].sum().sort_values(ascending=False).head(15)
    print(sales_by_state, "\n")
    plt.figure(figsize=(10,5))
    sns.barplot(x=sales_by_state.index, y=sales_by_state.values, palette='coolwarm')
    plt.title('Top 15 States by Sales Amount')
    plt.xlabel('State')
    plt.ylabel('Sales Amount')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

    print("10. Sales with and without Promotions:")
    promo_sales = data.copy()
    promo_sales['Has Promotion'] = promo_sales['promotion-ids'].notna()
    promo_summary = promo_sales.groupby('Has Promotion')['Amount'].sum()
    print(promo_summary, "\n")
    plt.figure(figsize=(6,4))
    promo_summary.plot(kind='bar', color=['lightblue', 'salmon'])
    plt.title('Sales Amount: With vs Without Promotion')
    plt.xlabel('Has Promotion')
    plt.ylabel('Total Sales Amount')
    plt.xticks([0,1], ['No', 'Yes'], rotation=0)
    plt.tight_layout()
    plt.show()

    print("11. Sales Trend by Weekday:")
    weekday_sales = data.groupby('Weekday')['Amount'].sum().sort_index()
    print(weekday_sales, "\n")
    plt.figure(figsize=(8,4))
    sns.lineplot(x=weekday_sales.index, y=weekday_sales.values, marker='o')
    plt.title('Sales Amount by Weekday')
    plt.xlabel('Weekday (0=Monday)')
    plt.ylabel('Sales Amount')
    plt.tight_layout()
    plt.show()

    print("12. Quarter-wise Sales Comparison:")
    quarter_sales = data.groupby('Quarter')['Amount'].sum().sort_index()
    print(quarter_sales, "\n")
    plt.figure(figsize=(8,4))
    sns.barplot(x=quarter_sales.index, y=quarter_sales.values, palette='viridis')
    plt.title('Total Sales by Quarter')
    plt.xlabel('Quarter')
    plt.ylabel('Sales Amount')
    plt.tight_layout()
    plt.show()

if __name__ == '__main__':
    main()
