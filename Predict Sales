# Predict Sales Amount using XGBoost

# Import libraries
import pandas as pd
import xgboost as xgb
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.preprocessing import LabelEncoder

# Load data
data = pd.read_csv('train&testdata.csv')

# Preview data
print(data.head())

# Preprocessing:
# Convert any datetime columns if needed
data['Date'] = pd.to_datetime(data['Date'], errors='coerce')  # if 'Date' exists

# Feature Engineering: create any date features if useful, e.g., month, weekday
data['Month'] = data['Date'].dt.month
data['Weekday'] = data['Date'].dt.weekday

# Select features and target
features = ['Size', 'Color', 'Courier Status', 'Month', 'Weekday']  # add other relevant features
target = 'Amount'

# Handle missing values for features
data = data.dropna(subset=features + [target])

X = data[features].copy()
y = data[target]

# Encode categorical features
label_encoders = {}
for col in X.select_dtypes(include=['object']).columns:
    le = LabelEncoder()
    X[col] = le.fit_transform(X[col].astype(str))
    label_encoders[col] = le

# Split dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train XGBoost regressor
model = xgb.XGBRegressor(
    objective='reg:squarederror',
    n_estimators=200,
    learning_rate=0.1,
    random_state=42
)

model.fit(X_train, y_train)

# Evaluate
y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"Mean Absolute Error: {mae:.2f}")
print(f"R^2 Score: {r2:.3f}")

# Plot actual vs predicted
plt.figure(figsize=(8,6))
plt.scatter(y_test, y_pred, alpha=0.4)
plt.xlabel('Actual Sales Amount')
plt.ylabel('Predicted Sales Amount')
plt.title('Actual vs Predicted Sales Amount')
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--')
plt.tight_layout()
plt.show()
